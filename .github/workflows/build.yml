name: Build

on:
  push:
    branches-ignore:
      - gh-readonly-queue/**
  pull_request:
  merge_group:

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    env:
      CARGO_HTTP_MULTIPLEXING: false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
        - os: ubuntu-latest
          cmake-args: -G Ninja
          cmake-init-env: CXXFLAGS=-Werror
          package-file: "*-linux_x86_64.tar.xz"
          fancy: true

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        # mount: /var/lib/grub/esp: special device /dev/disk/by-id/scsi-... does not exist.
        # sudo apt-get upgrade -y
        sudo apt-get install pkg-config ninja-build libfreetype6-dev libnotify-dev libsdl2-dev libsqlite3-dev libvulkan-dev glslang-tools spirv-tools libavcodec-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev libx264-dev libpng-dev valgrind gcovr libglew-dev -y

    - name: Prepare Linux (non-fancy)
      if: ${{ contains(matrix.os, 'ubuntu') && !matrix.fancy }}
      run: |
        curl -LO https://github.com/Kitware/CMake/releases/download/v3.13.4/cmake-3.13.4-Linux-x86_64.tar.gz
        sudo tar --strip-components 1 -C /usr -xf cmake-3.13.4-Linux-x86_64.tar.gz
        # Our minimum supported Rust version (MSRV)
        rustup default 1.63.0
        sudo rm -rf /var/lib/mysql/ /var/run/mysqld
        sudo mkdir /var/lib/mysql/ /var/run/mysqld/
        sudo chown mysql:mysql /var/lib/mysql/ /var/run/mysqld/
        sudo mysqld --initialize-insecure --user=mysql --basedir=/usr --datadir=/var/lib/mysql/
        sudo /usr/bin/mysqld_safe --basedir=/usr --datadir='/var/lib/mysql/' &
        sleep 10
        sudo mysql <<EOF
        CREATE DATABASE ddnet;
        CREATE USER 'ddnet'@'localhost' IDENTIFIED BY 'thebestpassword';
        GRANT ALL PRIVILEGES ON ddnet.* TO 'ddnet'@'localhost';
        FLUSH PRIVILEGES;
        EOF

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build ddnet 683eb4aa57be1dd025c5602881446e2dec2399c7
      run: |
        cd ..
        git clone --recursive https://github.com/ddnet/ddnet.git
        cd ddnet
        git checkout 683eb4aa57be1dd025c5602881446e2dec2399c7
        mkdir build
        cd build
        cmake -E env ${{ matrix.cmake-init-env }} cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Debug -Werror=dev -DDEV=ON -DANTIBOT=ON ..
        cmake --build . --config Debug --target everything ${{ matrix.build-args }}

    - name: Check abi
      run: |
          ./scripts/update_abi.sh --dry-run

    - name: Build antibot
      run: |
          make

    - name: Run server
      run: |
        cp libantibot.so ../ddnet/build
        cd ../ddnet/build
        ./DDNet-Server shutdown

